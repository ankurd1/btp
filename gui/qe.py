#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed May  9 12:34:13 2012

import wx
from GdbPexpect import GdbPexpect
import sqlite3


class MyFrame(wx.Frame):
    def __init__(self, database, gdb_pexpect, *args, **kwds):
        self.gdb_pexpect = gdb_pexpect
        self.__init_db(database)
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.search_box = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)
        self.button_backward = wx.Button(self, -1, label="<<", name='backward')
        self.button_forward = wx.Button(self, -1, label=">>", name='forward')
        self.entries_list_box = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
        self.detail_pane = wx.StaticText(self, -1, "Entry Details")

        self.__set_properties()
        self.__do_layout()
        self.__setup_events()
        # end wxGlade

        self.entries_list_box.Append("Ankur")
        self.entries_list_box.Append("Archit")
        self.entries_list_box.Append("Swapnil")

    def __init_db(self, database):
        self.conn = sqlite3.connect(database)
        self.cursor = self.conn.cursor()

    def __setup_events(self):
        self.button_forward.Bind(wx.EVT_BUTTON, self.search_button_clicked)
        self.button_backward.Bind(wx.EVT_BUTTON, self.search_button_clicked)
        self.entries_list_box.Bind(wx.EVT_LISTBOX, self.entry_clicked)
        self.entries_list_box.Bind(wx.EVT_LISTBOX_DCLICK, self.entry_d_clicked)

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Query Engine - RRDebug")
        self.search_box.SetMinSize((150, 27))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.search_box, 0, wx.ALL, 0)
        sizer_2.Add(self.button_backward, 0, 0, 0)
        sizer_2.Add(self.button_forward, 0, 0, 0)
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT, 0)
        sizer_1.Add((-1,20))
        sizer_3.Add(self.entries_list_box, 1, wx.ALL|wx.EXPAND, 0)
        sizer_3.Add(self.detail_pane, 1, wx.ALL|wx.EXPAND, 3)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def search_button_clicked(self, e):
        button_name = e.GetEventObject().GetName()
        query = self.search_box.GetValue()

        out = gdb_pexpect.execute('p &{0}'.format(query))[1]
        if (out.startswith('No symbol')):
            wx.MessageDialog(None, "Symbol not found.", 'Error',
                    wx.OK | wx.ICON_ERROR).ShowModal()
        else:
            query_addr = out.split('0x')[1].strip()
            cur_index = self.entries_list_box.GetSelection()
            if cur_index == wx.NOT_FOUND:
                cur_ts = 0
            else:
                cur_ts = self.entries_list_box.GetClientData(cur_index)['timestamp']

            if (button_name == 'forward'):
                res = self.db_search(cur_ts, query_addr)
            else:
                res = self.db_search(cur_ts, query_addr, False)

            if (len(res) == 0):
                wx.MessageDialog(None, "Address not found in database.", 'Error',
                        wx.OK | wx.ICON_ERROR).ShowModal()
            #else:
                # add these to the list_box


    def entry_clicked(self, e):
        selected = self.entries_list_box.GetSelection()
        self.detail_pane.SetLabel(self.entries_list_box.GetString(selected))

    def entry_d_clicked(self, e):
        pass

    def db_search(self, ts, mem_addr=None, forward=True, limit=50):
        if forward:
            comp = '>'
        else:
            comp = '<'

        if (mem_addr is None):
            results = self.cursor.execute('SELECT * FROM logs WHERE timestamp\
                    {0} {1} limit {2}'.format(comp, ts, limit)).fetchall()
        else:
            results = self.cursor.execute('SELECT * FROM logs WHERE timestamp\
                    {0} {1} AND mem_addr = "{2}" limit {3}'.format(comp, ts,
                        mem_addr, limit)).fetchall()

        return results


# end of class MyFrame


if __name__ == "__main__":
    database = '../rrdebug.sqlite'
    gdb_exec = '/usr/bin/gdb'
    vmlinux = '/media/data/vbox/vmlinux-2.6.32-5-openvz-686-deb'

    gdb_pexpect = GdbPexpect(gdb_exec)
    gdb_pexpect.execute('file ' + vmlinux)

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(database, gdb_pexpect, None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.SetSizeHints(800, 600)
    frame_1.Show()
    frame_1.Maximize()
    app.MainLoop()
